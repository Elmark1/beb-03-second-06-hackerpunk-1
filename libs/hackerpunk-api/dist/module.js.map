<<<<<<< HEAD
{"mappings":"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","sources":["src/index.ts","lib/HP.ts","lib/HPA.ts","lib/provider.ts","lib/wallet.ts"],"sourcesContent":["import { HP } from \"../lib/HP\";\nimport { HPA } from \"../lib/HPA\";\nimport { setProvider } from \"../lib/provider\";\nimport { createWallet } from \"../lib/wallet\";\n\nexport { HP, HPA, setProvider, createWallet };\n","import { ethers } from \"ethers\";\n\n// const ca, abi\n\nclass HP {\n  provider: ethers.providers.BaseProvider;\n  wallet: ethers.Wallet;\n  signer: ethers.Signer;\n  contractSigner: ethers.Contract;\n  contractProvider: ethers.Contract;\n\n  // Temporary\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    provider: ethers.providers.BaseProvider,\n    privateKey: ethers.utils.BytesLike,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.provider = provider;\n    this.wallet = new ethers.Wallet(privateKey);\n    this.signer = this.wallet.connect(this.provider);\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n\n    this.contractSigner = new ethers.Contract(\n      this.contractAddress,\n      this.abi,\n      this.signer\n    );\n    this.contractProvider = new ethers.Contract(\n      this.contractAddress,\n      this.abi,\n      this.provider\n    );\n  }\n\n  /**\n   *\n   * @param address\n   * @returns\n   */\n  async balanceOf(address: string): Promise<any> {\n    const result = await this.contractProvider.balanceOf(address);\n    return result;\n  }\n\n  /**\n   * @param recipient token minted to\n   * @returns\n   */\n  async attendanceMint(recipient: string): Promise<any> {\n    const result = await this.contractSigner.attendanceMint(recipient);\n    return result;\n  }\n\n  /**\n   * @method mint at once, since tx fee\n   * @param recipients array token minted to\n   * @returns\n   */\n  async attendanceMintBatch(recipients: string[]): Promise<any> {\n    const result = await this.contractSigner.attendanceMintBatch(recipients);\n    return result;\n  }\n\n  /**\n   * @param donateRecord array of donate record: { from, to, amount }\n   * @returns\n   */\n  async donateBatch(donateRecord: object[]): Promise<any> {\n    const result = await this.contractSigner.donateBatch(donateRecord);\n    return result;\n  }\n}\n\nexport { HP };\n","import { ethers } from \"ethers\";\n\n// const ca, abi\n\nclass HPA {\n  provider: ethers.providers.BaseProvider;\n  wallet: ethers.Wallet;\n  signer: ethers.Signer;\n  contractSigner: ethers.Contract;\n  contractProvider: ethers.Contract;\n\n  // Temporary\n  contractAddress: string;\n  abi: ethers.ContractInterface;\n\n  constructor(\n    provider: ethers.providers.BaseProvider,\n    privateKey: ethers.utils.BytesLike,\n    contractAddress: string,\n    abi: ethers.ContractInterface\n  ) {\n    this.provider = provider;\n    this.wallet = new ethers.Wallet(privateKey);\n    this.signer = this.wallet.connect(this.provider);\n    this.contractAddress = contractAddress;\n    this.abi = abi;\n\n    this.contractSigner = new ethers.Contract(\n      this.contractAddress,\n      this.abi,\n      this.signer\n    );\n    this.contractProvider = new ethers.Contract(\n      this.contractAddress,\n      this.abi,\n      this.provider\n    );\n  }\n}\n\nexport { HPA };\n","import { ethers } from \"ethers\";\n\n/**\n * @param network default mainnet, can be url like http or wss\n * @param provider etherscan, infura, alchemy, etc...\n * @param key apikey, in case of infura project_id\n * @returns provider\n */\nexport const setProvider = (\n  network: string,\n  provider: string,\n  key: string\n): ethers.providers.BaseProvider => {\n  if (network === undefined) return ethers.getDefaultProvider();\n\n  if (network.startsWith(\"wss\") || network.startsWith(\"http\"))\n    return ethers.getDefaultProvider(network);\n\n  const options = {\n    [provider]: key,\n  };\n\n  return ethers.getDefaultProvider(network, options);\n};\n","import * as lightwallet from \"eth-lightwallet\";\n\n/**\n * @method: returns address and privateKey\n * @param {string} pwd user password\n * @return {Promise} object of address, privateKey and mnemonic\n */\nconst createWallet = (pwd: string): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    let secretSeed: string = lightwallet.keystore.generateRandomSeed();\n\n    lightwallet.keystore.createVault(\n      {\n        password: pwd,\n        seedPhrase: secretSeed,\n        hdPathString: \"m/0'/0'/0'\",\n      },\n      (err, ks) => {\n        if (err) reject(err);\n        ks.keyFromPassword(pwd, (err, pwDeriveKey) => {\n          if (err) reject(err);\n          ks.generateNewAddress(pwDeriveKey, 1);\n\n          let address = ks.getAddresses().toString();\n          let privateKey = ks.exportPrivateKey(address, pwDeriveKey);\n\n          resolve({ address, privateKey, mnemonic: secretSeed });\n        });\n      }\n    );\n  });\n};\n\nexport { createWallet };\n"],"names":[],"version":3,"file":"module.js.map"}
=======
{"mappings":"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","sources":["Desktop/beb-03-second-06-hackerpunk/libs/hackerpunk-api/src/index.ts","Desktop/beb-03-second-06-hackerpunk/libs/hackerpunk-api/lib/HPFT.ts","Desktop/beb-03-second-06-hackerpunk/libs/hackerpunk-api/lib/HPNFT.ts","Desktop/beb-03-second-06-hackerpunk/libs/hackerpunk-api/lib/provider.ts","Desktop/beb-03-second-06-hackerpunk/libs/hackerpunk-api/lib/wallet.ts"],"sourcesContent":["import HPFT from \"../lib/HPFT\";\nimport HPNFT from \"../lib/HPNFT\";\nimport { setProvider } from \"../lib/provider\";\nimport { createWallet } from \"../lib/wallet\";\n\nexport { HPFT, HPNFT, setProvider, createWallet };\n","import { ethers } from \"ethers\";\n\nconst ca = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n// ERC20 JSON Interface\nconst erc20ABI = [\n  // Read-Only Functions\n\n  \"function name() public view virtual override returns (string memory)\",\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\",\n\n  // Authenticated Functions\n  \"function transfer(address to, uint amount) returns (bool)\",\n\n  \"function mintTo(address account, uint256 activity) public onlyOwner\",\n  // Events\n  \"event Transfer(address indexed from, address indexed to, uint amount)\",\n];\n\nclass HPFT {\n  provider: ethers.providers.InfuraProvider;\n\n  constructor(provider: ethers.providers.InfuraProvider) {\n    this.provider = provider;\n  }\n\n  /**\n   * @param privateKey privateKey of central account\n   * @param to token minted to\n   * @param activity signup, signin or write a post, or comment\n   * @returns\n   */\n\n  async mintTo(\n    privateKey: ethers.utils.BytesLike,\n    to: string,\n    activity: number\n  ) {\n    // 수정\n    const wallet = new ethers.Wallet(privateKey);\n    const signer = wallet.connect(this.provider);\n\n    const contract = new ethers.Contract(ca, erc20ABI, signer);\n    //\n\n    const result = await contract.mintTo(to);\n    return result;\n  }\n\n  /**\n   * @param privateKey privateKey of sender account\n   * @param to token sent to\n   * @param amount amount of token\n   * @returns\n   */\n  async transfer(\n    privateKey: ethers.utils.BytesLike,\n    to: string,\n    amount: number\n  ) {\n    const wallet = new ethers.Wallet(privateKey);\n    const signer = wallet.connect(this.provider);\n\n    const contract = new ethers.Contract(ca, erc20ABI, signer);\n\n    const result = await contract.transfer(to, amount);\n    return result;\n  }\n}\n\nexport default HPFT;\n","import { ethers } from \"ethers\";\n\nconst ca = \"\";\nconst abi = [\"function symbol() view returns (string)\"];\n\nclass HPNFT {\n  provider: ethers.providers.InfuraProvider;\n\n  constructor(provider: ethers.providers.InfuraProvider) {\n    this.provider = provider;\n  }\n  /**\n   * @param privateKey privateKey of central account\n   * @param to token minted to\n   * @returns\n   */\n  async mintTo(privateKey: ethers.utils.BytesLike, to: string) {\n    const wallet = new ethers.Wallet(privateKey);\n    const signer = wallet.connect(this.provider);\n\n    const contract = new ethers.Contract(ca, abi, signer);\n\n    const result = await contract.mintTo(to);\n    return result;\n  }\n}\n\nexport default HPNFT;\n","import { ethers } from \"ethers\";\n\nexport const setProvider = (\n  network: string,\n  apiKey: string\n): ethers.providers.InfuraProvider => {\n  return new ethers.providers.InfuraProvider(network, apiKey);\n};\n","import * as lightwallet from \"eth-lightwallet\";\n\n/**\n * @method: returns address and privateKey\n * @param {string} pwd user password\n * @return {Promise} object of address and privateKey\n */\nconst createWallet = (pwd: string): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    let secretSeed: string = lightwallet.keystore.generateRandomSeed();\n\n    lightwallet.keystore.createVault(\n      {\n        password: pwd,\n        seedPhrase: secretSeed,\n        hdPathString: \"m/0'/0'/0'\",\n      },\n      (err, ks) => {\n        if (err) reject(err);\n        ks.keyFromPassword(pwd, (err, pwDeriveKey) => {\n          if (err) reject(err);\n          ks.generateNewAddress(pwDeriveKey, 1);\n\n          let address = ks.getAddresses().toString();\n          let privateKey = ks.exportPrivateKey(address, pwDeriveKey);\n\n          resolve({ address, privateKey });\n        });\n      }\n    );\n  });\n};\n\nexport { createWallet };\n"],"names":[],"version":3,"file":"module.js.map"}
>>>>>>> e158476 (test001)
